{
    "palindrome-String ": {
        "prefix": "palindrome",
        "body": [
            "bool ispalindrome(string s)",
            "{",
            "    int n=s.size();",
            "    for(int i=0;i<n;i++)  if(s[i]!=s[n-i-1]) return 0;",
            "    return 1;",
            "}"
        ],
        "description": "String "
    },
    "pangram-string": {
        "prefix": "pangram",
        "body": [
            "bool ispangram(string s)",
            "{",
            "    int n=s.size();",
            "    int f[26]={0}; ",
            "    for(int i=0;i<n;i++)  ",
            "     {",
            "         if(s[i]>='a' && s[i]<='z') ",
            "          f[s[i]-97]++;",
            "         else",
            "         if(s[i]>='A' && s[i]<='Z') ",
            "          f[s[i]-65]++;",
            "     }",
            "     for(int i=0;i<26;i++)",
            "     if(f[i]==0) return 0;",
            "    return 1;",
            "}"
        ],
        "description": "pangram-string"
    },
    "anagram-strings": {
        "prefix": "anagram",
        "body": [
            "bool isanagram(string a, string b)",
            "{",
            "    if(a.size()!=b.size()) return 0;",
            "    int f[26]={0}; ",
            "    for(int i=0;i<a.size();i++)  ",
            "     {",
            "         if(a[i]>='a' && a[i]<='z') ",
            "          f[a[i]-97]++;",
            "         else",
            "         if(a[i]>='A' && a[i]<='Z') ",
            "          f[a[i]-65]++;",
            "     }",
            "     for(int i=0;i<b.size();i++)  ",
            "     {",
            "         if(b[i]>='a' && b[i]<='z') ",
            "          f[b[i]-97]--;",
            "         else",
            "         if(b[i]>='A' && b[i]<='Z') ",
            "          f[b[i]-65]--;",
            "     }",
            "     for(int i=0;i<26;i++)",
            "     if(f[i]!=0) return 0;",
            "    return 1;",
            "}"
        ],
        "description": "anagram-strings"
    },
    "string->decimal": {
        "prefix": "strtodec",
        "body": [
            "long long int string_to_decimal(string s)",
            "{",
            "	long long int ans=0,p=1;",
            "    for(int i=s.size()-1;i>=0;i--)",
            "    {",
            "		ans+= p*(s[i]-'0');",
            "		p=p*10;",
            "	}",
            "	return ans;",
            "}"
        ],
        "description": "string->decimal"
    },
    "decimal->string": {
        "prefix": "dectostr",
        "body": [
            "string decimal_to_string(long long int n)",
            "{",
            "	if(n==0) return \"0\";",
            "	string ans=\"\";",
            "	while(n>0)",
            "	{",
            "		ans=ans+(char)((n%10)+48);",
            "		n=n/10;",
            "	}",
            "	reverse(ans.begin(),ans.end());",
            "	return ans;",
            "}"
        ],
        "description": "decimal->string"
    }
}

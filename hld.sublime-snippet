<snippet>
  <content><![CDATA[
const ll N=200005;
 
vector<ll>vec[N];
 ll a[N];           //vertex values
 ll n,timer;             // size,timer;
 ll val[N];                //stores a[i] corresponding to label array
 ll subtree_size[N];       // original tree
 ll depth[N];              // original tree
 ll parent[N];             // original tree
 ll heavy_child[N];        // original tree
 ll label[N];              // label of nodes after hld
 ll top[N];                // top of the chain of segment
 ll tin[N];                // dfs in time
 ll tout[N];               // dfs out time
 ll up[N][l+1];     // binary lift
 void dfs(ll u,ll p) 
 {
   tin[u] = timer++;
   up[u][0] = p;
   rep(i,1,l) up[u][i] = up[up[u][i-1]][i-1];
   parent[u]=p;
   depth[u]=depth[p]+1;
   subtree_size[u]=1;
   for(ll v:vec[u])
   {
      if(v==p) continue;
      dfs(v,u);
      subtree_size[u]+=subtree_size[v];
   }
   ll child=0,mx=0;
   for(ll v:vec[u])
   {
      if(v==p) continue;
      if(subtree_size[v]>=mx)
      {
         mx=subtree_size[v];
         child=v;
      }
   
   }
   heavy_child[u]=child;
   tout[u] = timer++;
 }
void dfs2(ll u,ll p)     
{
   label[u]=timer++;
   val[label[u]]=a[u];
 
   if(!top[label[u]]) {top[label[u]]=label[u];}
   val[label[u]]=a[u];
 
   if(heavy_child[u]) 
      {
      label[heavy_child[u]]=timer;
      top[label[heavy_child[u]]]=top[label[u]];
      dfs2(heavy_child[u],u);
      }
   for(ll v:vec[u])
   {
      if(v==p || v==heavy_child[u]) continue;
      dfs2(v,u);
   }
}
//////////////////////////////////////////////////end of building heavy light decomposition
struct segtree{
    ll size=1,n;
    vector<ll>tree;
 
    void init(ll nn){
        n=nn;
        while(size<n)size*=2;
        tree.assign(2*size,0);
    }
    ll merge(ll s1,ll s2)
    {
        ll ans=0;
        return s1+s2;
    }
    void build(ll a[],ll x,ll l,ll r){
        if(r==l)
        {
            tree[x]=a[l];
            return;
        }
        
        ll m=(l+r)/2;
        build(a,2*x,l,m);
        build(a,2*x+1,m+1,r);
        tree[x]=merge(tree[2*x],tree[2*x+1]);
    }
    void build(ll a[]){
        build(a,1,1,n);
    }
    void update(ll i,ll v,ll x,ll l,ll r){
        if(r==l)
        {
          tree[x]=v;
          return;
        }
 
        ll m=(l+r)/2;
        if(i<=m) update(i,v,2*x,l,m);
        else     update(i,v,2*x+1,m+1,r);
 
        tree[x]=merge(tree[2*x],tree[2*x+1]);
        
    }
    void update(ll i,ll v){
        update(i,v,1,1,n);
    }
    ll query(ll ql,ll qr,ll x,ll l,ll r){
        if(l>r || ql>qr || l>qr || ql>r)    return 0;
        if(l>=ql and r<=qr) return tree[x];
        ll m=(l+r)/2;
        ll s1=query(ql,qr,2*x,l,m);
        ll s2=query(ql,qr,2*x+1,m+1,r);
        return merge(s1,s2);
        
    }
    ll query(ll ql,ll qr){
        return query(ql,qr,1,1,n);
    }
}st;
 ///////////////////////////////////////////////// end of segment tree
 
bool is_ancestor(ll u, ll v)
{
    return tin[u] <= tin[v] && tout[u] >= tout[v];
}
 
ll lca(ll u, ll v)
{
    if (is_ancestor(u, v)) return u;
    if (is_ancestor(v, u))  return v;
    for (ll i = l; i >= 0; --i) 
       if(!is_ancestor(up[u][i], v)) u = up[u][i];
    
    return up[u][0];
}
ll get_kth_ancestor(ll v, ll k) 
{
    for(ll i=l-1;i>=0;i--) 
    {
       if (v == -1) return v;
       if ((1 << i) <= k) {
        v = up[v][i];
        k -= (1 << i);
      }
    }
    return v;
  }
 
void init()               // initialize hld,segment tree, lca etc
{
   timer=1;
   rep(i,0,n)
   {
     val[i]=0;
     subtree_size[i]=0;
     depth[i]=0;
     parent[i]=0;
     heavy_child[i]=0;
     label[i]=0;
     top[i]=0;
     tin[i]=0;
     tout[i]=0;
     rep(j,0,l) up[i][j]=0;
   }
   dfs(1,1);
   timer=1;
   dfs2(1,0);
   st.init(n);
   st.build(val);
}
void update(ll idx,ll vv)        //set value of index idx to val (original tree)
  {
    st.update(label[idx],vv);
  }
  ll helper(ll u, ll p)         //calculate value of node u upto lca(p)
  {
    ll ans=0;
    while(depth[p]<depth[u])
         {
            if(label[u]- top[label[u]] < depth[u]-depth[p])
            {
               ans+=st.query(top[label[u]],label[u]);
               u=get_kth_ancestor(u,label[u]-top[label[u]]+1);
            }
            else
            {
               ans+=st.query(label[u]- (depth[u]-depth[p]) +1,label[u]);
               break;
            }
         }
         return ans;
  }
  ll query(ll u,ll v)                  //query path from u to v
  {
   ll _lca =lca(u,v);
   ll ans1= helper(u,_lca);
   ll ans=st.query(label[_lca],label[_lca]);
   ll ans2= helper(v,_lca);
   return ans+ans1+ans2;
  }
  // init();              must call after taking inputs (n,vec[],a[])
  // update(i,val);   update node i to val
  // query(a,b);       query path from a to b
]]></content>
  <tabTrigger>hld</tabTrigger>
  <description>heavy-light-decomposition</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>
<snippet>
  <content><![CDATA[
struct tri{
    struct node
    {
      ll prefix_count;
      ll isEnd;
      struct node *child[26];
    }*head;

    void init()
    {
      head = new node();
      head->isEnd = 0;
      head->prefix_count = 0;
    }

    void insert(string word)
    {
      node *current = head;
      current->prefix_count++;
      
      for(ll i = 0 ; i < word.length(); ++i)
      {
        int letter = (int)word[i] - (int)'a'; //extrct first character of word
        if(current->child[letter] == NULL)
          current->child[letter] = new node();

        current->child[letter]->prefix_count++;
        current = current->child[letter];   
      }
      current->isEnd++;
    }
    ll count(string word)
    {
      node *current = head;
      for(int i = 0 ; i < word.length(); ++i)
      {
        int letter = (int)word[i] - (int)'a';
        if(current->child[letter] == NULL)
          return 0;   //not found
        current = current->child[letter];
      }
      return current->isEnd;
    }
    bool remove(string word)
    {
      if(count(word)==0) return 0; // word does not exist
      node *current = head;
      for(int i = 0 ; i < word.length(); ++i)
      {
        int letter = (int)word[i] - (int)'a';
        if(current->child[letter] == NULL)
          return 0;   //not found
        current->child[letter]->prefix_count--;
        current = current->child[letter];
      }
      current->isEnd--;
      return 1;
    }
    int words_with_prefix(string prefix)
    {
      node *current = head;
      for(int i = 0; i < prefix.length() ; ++i)
      {
        int letter = (int)prefix[i] - (int)'a';
        if(current->child[letter] == NULL)
          return 0;
        else
          current = current->child[letter];
      }
      return current->prefix_count;
    }
};
// tri T;
// T.init();
// T.insert(s);
// T.remove(s);
// T.count(s);
// T.words_with_prefix(s);
]]></content>
  <tabTrigger>tri</tabTrigger>
  <description>Trie</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>
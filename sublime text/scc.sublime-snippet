<snippet>
  <content><![CDATA[
const ll N=1000005;
vll vec[N];     // original graph
vll rev_vec[N]; // reverse graph
stack<ll>st;    
vvll comp;       // connected components
ll vis[N];        
vll temp;        //use to build comp
vll scc_vec[N];   // condensed graph
ll root[N];       // root of each node in scc graph

void dfs(ll u)
{
  vis[u]=1;

  for(ll v:vec[u])
  {
    if(vis[v]) continue;
    dfs(v);
  }
  st.push(u);
}

void dfs2(ll u)
{
  vis[u]=1;
  temp.pb(u);
  for(ll v:rev_vec[u])
  {
    if(vis[v]) continue;
    dfs2(v);
  }
}
void scc_init(ll n)
{
    // clear everything for multiple tests
    rep(i,1,n)
    {
        vis[i]=0;
        root[i]=0;
        rev_vec[i].clear();
        scc_vec[i].clear();
    }
    while(st.size()) st.pop();
    comp.clear();
    temp.clear();
    //---------------------------------------------
    
    // build reverse graph  
    rep(i,1,n) for(ll v:vec[i]) rev_vec[v].pb(i);
    
     //1st pass of kosaraju (build stack)
     rep(i,1,n) if(!vis[i]) dfs(i);
    
    // mark everything unvisited 
    rep(i,1,n) vis[i]=0;


    // 2nd pass of kosaraju - find components
    while(st.size())
    {
     ll u=st.top(); st.pop();
     if(vis[u]) continue;
     dfs2(u);
     if(temp.size()) comp.pb(temp);
     temp.clear();
    }
    
    //mark the root node for each component (its any node)
    for(vll v:comp) for(ll x:v) root[x]=v[0];

   // build condensed graph
     rep(i,1,n)
       {
         for(ll v:vec[i])
         {
            if(root[i]==root[v]) continue;
            scc_vec[root[i]].pb(root[v]);
         }
      }      
}
//    call after taking input
//    scc_init(n); 
]]></content>
  <tabTrigger>scc</tabTrigger>
  <description>strongly connected components</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>
<snippet>
  <content><![CDATA[
struct string_palindrome
{
  string s;
  vvll dp;    // dp[i][j] = substring i...j is palindrome?
  ll mx;    // maximum length palindromic substring
  ll count; // count of palindromic substrings
  ll n;    // size of string s
  void init(string ss)
  {
    s=ss;
    count=0,mx=0;
    n=s.size();
    if(s.size()>0 && s[0]!=' ') s=' '+s;

    dp= vvll(n+1,vll(n+1,0));

    rep(i,0,n) dp[i][0]=dp[0][i]=0;
    rep(i,1,n) dp[i][i]=1;
    rep(i,1,n-1) dp[i][i+1]= ( s[i]==s[i+1] ? 1 :0 );

    ll len=3;
    while(len<=n)
    {
      ll l=1,r=len;
      while(r<=n)
      {
         if(s[l]==s[r]) dp[l][r]=dp[l+1][r-1];
         else dp[l][r]=0;
         l++; r++;
      }
      len++;
    }
    rep(i,1,n) rep(j,i,n)
    {
       if(dp[i][j]==1) {count++; mx=max(mx,j-i+1);}
    }
  }
  ll palindromic_substrings()
  {
     return count;
  }
  ll longest_palindromic_substring()
  {
     return mx;
  }
};
// string_palindrome st;
// st.init(s);
]]></content>
  <tabTrigger>string_palindrome</tabTrigger>
  <description>string_palindrome</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <!-- <scope >source.python</scope > -->
</snippet>
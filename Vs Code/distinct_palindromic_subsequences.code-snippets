{
	"distinct_palindromic_subsequences": {
		"prefix": "distinct_palindromic_subsequences",
		"body": [
		  "// distinct palindromic subsequences of a string in ",
		  "// O(n*n*26)  example \"abb\" -> 3  (\"a\", \"b\", \"bb\") ",
		  "",
		  " struct distinct_palindromic_subsequences",
		  "{",
		  "     string s;",
		  "     vvvll dp;",
		  "     ll ans,n;",
		  "",
		  "     ll rec(ll l,ll r,ll c)",
		  "     {",
		  "          if(l>r) return 0;",
		  "          if(l==r)",
		  "          {",
		  "            if(s[l]== c +'a') return dp[l][r][c]=1; ",
		  "            else return dp[l][r][c]=0;",
		  "          }",
		  "    ",
		  "    if(dp[l][r][c]!=-1) return dp[l][r][c];",
		  "    ll ans=0;",
		  "",
		  "    if(s[l]==s[r] && s[l]==(c+'a'))",
		  "    {",
		  "      ans=2;",
		  "      rep(i,0,25) modadd(ans, rec(l+1,r-1,i));",
		  "    }",
		  "    else",
		  "    {",
		  "      modadd(ans,rec(l,r-1,c));",
		  "      modadd(ans,rec(l+1,r,c));",
		  "      modsub(ans,rec(l+1,r-1,c));",
		  "    }",
		  "    return dp[l][r][c]=ans;",
		  "  }",
		  "",
		  "    void init(string ss)",
		  "    {",
		  "      s=ss;",
		  "      n=s.size();",
		  "",
		  "      dp= vvvll(n+1, vvll(n+1 , vll(26,0)));",
		  "      s=' '+s;",
		  "",
		  "      rep(i,0,n) rep(j,0,n) rep(k,0,25) dp[i][j][k]=-1;",
		  "      rep(i,0,25) rec(1,n,i);",
		  "",
		  "      ans=0;",
		  "      rep(i,0,25) modadd(ans,dp[1][n][i]);",
		  "",
		  "    }",
		  "};",
		  "  // string s = \"abc\";",
		  "  // distinct_palindromic_subsequences st;",
		  "  // st.init(s);",
		  "  // cout<<st.ans;"
		],
		"description": "distinct_palindromic_subsequences"
	  }
}